<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
    <!-- TODO: Change paths and names accordingly -->
    <?define TargetPath="..\..\..\target\$(var.TARGET)\release"?>
    <?define ElanCustomActionDll="$(var.TargetPath)\elan_msi.dll"?>
    <?define ElanExe="$(var.TargetPath)\elan-init.exe"?>
        
    <Product Id="*" Name="elan" Language="1033" Version="$(env.CFG_VER_MAJOR).$(env.CFG_VER_MINOR).$(env.CFG_VER_PATCH).0" Manufacturer="The Rust Project Developers" UpgradeCode="09acbb1c-7123-44ac-b2a9-4a04b28ced11">
        <Package InstallerVersion="200" Compressed="yes" InstallScope="perUser" />

        <Condition Message="The Rust toolchain is only supported on Windows 7, Windows Server 2008 R2, or higher.">
            <![CDATA[Installed OR (VersionNT >= 601)]]>
        </Condition>

        <!-- TODO: How to configure updates? `AllowDowngrades` automatically removes previously installed versions, no matter what version they have -->
        <MajorUpgrade AllowDowngrades="yes" />
        
        <!-- Specifies a single cab file to be embedded in the installer's .msi. -->
        <MediaTemplate EmbedCab="yes" CompressionLevel="high" />

        <Feature Id="Elan" Title="elan" Absent="disallow" Display="1" AllowAdvertise="no">
            <ComponentRef Id="ElanExe" />
            <ComponentRef Id="RegisterProductCode" />
            <ComponentRef Id="RegisterInstallDir" />
        </Feature>
        <!-- TODO: Add UI to actually let the user disable this Feature -->
        <Feature Id="Path" Title="Add to PATH" Absent="allow" Description="Add Rust to PATH environment variable" Display="2" AllowAdvertise="no">
            <ComponentRef Id="ModifyPathEnv" />
        </Feature>
        
        <!-- Set some metadata that will appear in the "Installed Programs" list -->
        <Property Id="ARPCONTACT" Value="elan" />
        <Property Id="ARPCOMMENTS" Value="elan â€“ The Rust Toolchain Installer" />
        <Property Id="ARPURLINFOABOUT" Value="http://github.com/Kha/elan" />
        <Property Id="ARPPRODUCTICON" Value="rust.ico" />

        <!-- Disable Modify and Repair options (our custom actions based install model does not support repairing) -->
        <Property Id="ARPNOMODIFY" Value="1" />
        <Property Id="ARPNOREPAIR" Value="1" />
        
        <Icon Id="rust.ico" SourceFile="rust-logo.ico"/>

        <!-- Reference the UI defined in ui.wxs -->
        <UIRef Id="CustomUI" />
        <WixVariable Id="WixUIDialogBmp" Value="dialogbg.bmp" />
        <WixVariable Id="WixUIBannerBmp" Value="banner.bmp" />

        <Directory Id="TARGETDIR" Name="SourceDir">
            <!-- `INSTALLLOCATION` will be set by custom action -->
            <Directory Id="INSTALLLOCATION">
                <Directory Id="INSTALLLOCATION_BINARY" Name="bin"/>
            </Directory>
        </Directory>

        <DirectoryRef Id="INSTALLLOCATION_BINARY">
            <Component Id="ElanExe" Guid="df2ab9f7-7888-465c-98dd-bb58cbca68f7">
                <!-- Install the main elan.exe binary -->
                <File Source="$(var.ElanExe)" Name="elan.exe" KeyPath="yes"/>
            </Component>
            <Component Id="RegisterInstallDir" Guid="*">
                <!-- Remember the installation directory in the registry -->
                <RegistryKey Root="HKCU" Key="Software\elan">
                    <RegistryValue Name="InstallDir" Type="string" Value="[INSTALLLOCATION]" KeyPath="yes"/>
                </RegistryKey>
            </Component>
            <Component Id="RegisterProductCode" Guid="*">
                <!-- Write the product code to the registry, so we can use it to run the uninstaller -->
                <RegistryKey Root="HKCU" Key="Software\elan">
                    <RegistryValue Name="InstalledProductCode" Type="string" Value="[ProductCode]" KeyPath="yes" />
                </RegistryKey>
            </Component>
            <Component Id="ModifyPathEnv" Guid="*">
                <!-- Prepend to PATH environment variable -->
                <RegistryValue Root="HKCU" Key="Software\elan" Name="PathEnv" Type="string" Value="1" KeyPath="yes" />
                <Environment Id="PathEnv" Name="PATH" Value="[INSTALLLOCATION_BINARY]" Permanent="no" Part="first" Action="set" System="no" />
            </Component>
        </DirectoryRef>

        <!-- Read installation path from the registry. This is required for uninstall and upgrade
             and should only find something if elan has already been installed via MSI. -->
        <Property Id="INSTALLLOCATION_REGISTRY">
            <RegistrySearch Id="SearchRegistryInstallLocation" Root="HKCU" Key="Software\elan" Name="InstallDir" Type="raw" />
        </Property>
        
        <!-- Read environment variables `LEANPKG_HOME` and `ELAN_HOME`, because they won't be visible in custom actions later -->
        <SetProperty Action="ReadLeanpkgHome" Id="LEANPKG_HOME" Value="[%LEANPKG_HOME]" Before="AppSearch" Sequence="first" />
        <SetProperty Action="SetLeanpkgHomeOverride" Id="LEANPKG_HOME_OR_DEFAULT" Value="[LEANPKG_HOME]" After="ReadLeanpkgHome" Sequence="first">LEANPKG_HOME</SetProperty>
        <SetProperty Action="SetLeanpkgHomeDefault" Id="LEANPKG_HOME_OR_DEFAULT" Value="[%USERPROFILE]\.leanpkg" After="ReadLeanpkgHome" Sequence="first">NOT LEANPKG_HOME</SetProperty>

        <SetProperty Action="ReadElanHome" Id="ELAN_HOME" Value="[%ELAN_HOME]" Before="AppSearch" Sequence="first" />
        <SetProperty Action="SetElanHomeOverride" Id="ELAN_HOME_OR_DEFAULT" Value="[ELAN_HOME]" After="ReadElanHome" Sequence="first">ELAN_HOME</SetProperty>
        <SetProperty Action="SetElanHomeDefault" Id="ELAN_HOME_OR_DEFAULT" Value="[%USERPROFILE]\.elan" After="ReadElanHome" Sequence="first">NOT ELAN_HOME</SetProperty>

        <!-- Looks for `elan.exe` in `%USERPROFILE%\.leanpkg\bin` or `%LEANPKG_HOME%\bin` respectively -->
        <Property Id="ELAN_EXE_EXISTS">
            <DirectorySearch Id="ExistingElanExeSearch" Path="[LEANPKG_HOME_OR_DEFAULT]\bin" Depth="0">
                <FileSearch Name="elan.exe" />
            </DirectorySearch>
        </Property>

        <!-- Looks for `%USERPROFILE%\.elan` or `%ELAN_HOME%` respectively -->
        <Property Id="ELAN_DIRECTORY_EXISTS">
            <DirectorySearch Id="ExistingElanDirSearch" Path="[ELAN_HOME_OR_DEFAULT]" Depth="0" AssignToProperty="yes" />
        </Property>

        <!-- This property will be set whenever a previous installation of elan was found, even if it was not installed via MSI -->
        <SetProperty Id="ELAN_EXISTS" Value="1" After="AppSearch" Sequence="first">ELAN_EXE_EXISTS AND ELAN_DIRECTORY_EXISTS</SetProperty>

        <!-- Propagate correct value to INSTALLLOCATION directory -->
        <SetDirectory Action="AssignInstallLocationExisting" Id="INSTALLLOCATION" Value="[INSTALLLOCATION_REGISTRY]" Sequence="first">INSTALLLOCATION_REGISTRY</SetDirectory>
        <SetDirectory Action="AssignInstallLocationNew" Id="INSTALLLOCATION" Value="[LEANPKG_HOME_OR_DEFAULT]" Sequence="first">NOT INSTALLLOCATION_REGISTRY</SetDirectory>

        <!-- Register the DLL containing the custom actions as an embedded binary -->
        <Binary Id="ElanCustomActionDll" SourceFile="$(var.ElanCustomActionDll)"/>
        <!-- Use a type 51 custom action to send options to deferred custom action `ElanInstall`
             (can use arbitrary string that encodes all necessary properties and will be parsed from Rust) -->
        <CustomAction Id="SetInstallOptions" Property="ElanInstall" Value="INSTALLLOCATION=[INSTALLLOCATION];ELAN_HOME=[ELAN_HOME_OR_DEFAULT];ELAN_EXISTS=[ELAN_EXISTS]" />
        <CustomAction Id="SetUninstallOptions" Property="ElanUninstall" Value="INSTALLLOCATION=[INSTALLLOCATION];ELAN_HOME=[ELAN_HOME_OR_DEFAULT];ELAN_EXISTS=[ELAN_EXISTS]" />
        <CustomAction Id="ElanInstall" BinaryKey="ElanCustomActionDll" DllEntry="ElanInstall" Execute="deferred" Return="check" Impersonate="yes"/>
        <CustomAction Id="ElanUninstall" BinaryKey="ElanCustomActionDll" DllEntry="ElanUninstall" Execute="deferred" Return="check" Impersonate="yes"/>
        
        <!-- Schedule our custom actions -->
        <InstallExecuteSequence>
            <Custom Action="SetInstallOptions" Before="InstallInitialize">NOT Installed</Custom>
            <Custom Action="ElanInstall" After="InstallFiles">NOT Installed</Custom>
            <!-- Run ElanUninstall only on true uninstall, not on upgrade -->
            <Custom Action="SetUninstallOptions" Before="InstallInitialize">Installed AND (NOT UPGRADINGPRODUCTCODE)</Custom>
            <Custom Action="ElanUninstall" After="RemoveFiles">Installed AND (NOT UPGRADINGPRODUCTCODE)</Custom>
        </InstallExecuteSequence>

        <!-- Send a WM_SETTINGCHANGE message to tell processes like explorer to update their
             environments so any new command prompts get the updated %PATH% -->
        <CustomActionRef Id="WixBroadcastEnvironmentChange" />
    </Product>
</Wix>
